/// @file 
/// @brief Файл содержит реализацию переменной
#include <rpc/include/precompiled.h>

namespace rpc 
{
//=====================================================================================================================
Value::Value( void )
{
	
}
//=====================================================================================================================
Value::Value( const boost::property_tree::wptree& ptree ) : ptree_( std::make_shared<boost::property_tree::wptree>( ptree ) )
{
}
//=====================================================================================================================
Value::~Value()
{
}
//=====================================================================================================================
Value Value::operator[]( const std::wstring& key ) const
{
	if( !ptree_ ){
		return Value();	
	}

	const auto iterator = ptree_->find( key );
	if( iterator == ptree_->not_found() ){
		return Value();
	}

	return Value( iterator->second );
}
//=====================================================================================================================
std::wstring Value::asString( void ) const
{
	return ptree_->get_value<std::wstring>();
}
//=====================================================================================================================
bool Value::asBool( void ) const
{
	return ptree_->get_value<bool>();
}
//=====================================================================================================================
double Value::asDouble( void ) const
{
	return ptree_->get_value<double>();
}
//=====================================================================================================================
unsigned int Value::asUInt( void ) const
{
	return ptree_->get_value<unsigned int>();
}
//=====================================================================================================================
int Value::asInt( void ) const
{
	return ptree_->get_value<int>();
}
//=====================================================================================================================
bool Value::isString( void ) const
{
	return !!ptree_->get_value_optional<std::wstring>();
}
//=====================================================================================================================
bool Value::isBool( void ) const
{
	return !!ptree_->get_value_optional<bool>(); 
}
//=====================================================================================================================
bool Value::isDouble( void ) const
{
	return !!ptree_->get_value_optional<double>(); 
}
//=====================================================================================================================
bool Value::isUInt( void ) const
{
	return !!ptree_->get_value_optional<unsigned int>();
}
//=====================================================================================================================
bool Value::isInt( void ) const
{
	return !!ptree_->get_value_optional<int>();
}
//=====================================================================================================================
bool Value::isNull( void ) const
{
	if( !ptree_->get_value_optional<std::wstring>() ){
		return false;
	}

	return ptree_->get_value<std::wstring>() == L"null";
}
//=====================================================================================================================
bool Value::isArray( void ) const
{
	if( isNull() ){
		return true;
	}

	if( ptree_->empty() ){
		return false;		
	}

	return true;
}
//=====================================================================================================================
bool Value::isObject( void ) const
{
	return ptree_ && !ptree_->empty();
}
//=====================================================================================================================
bool Value::isMember( const std::wstring& key ) const
{
	return !!ptree_->get_child_optional( key );
}
//=====================================================================================================================
bool Value::isEmpty( void ) const
{
	return ptree_->empty();
}
//=====================================================================================================================
bool Value::isValid( void ) const
{
	return !!ptree_;
}
//=====================================================================================================================
const boost::property_tree::wptree& Value::operator()( void ) const
{
	return *ptree_;
}
//=====================================================================================================================
size_t Value::size( void ) const
{
	return ptree_->size();
}
//=====================================================================================================================
}
